{-# LANGUAGE ScopedTypeVariables #-}

import Control.Monad (sequence)
import Data.Char (isDigit)
import Data.List (nub, permutations)
import qualified Data.Map.Strict as M
import Test.HUnit (Test(..), assertEqual, runTestTTAndExit)

data Direction
  = A
  | U
  | R
  | D
  | L
  deriving (Show, Enum, Eq, Ord)

data Numpad
  = NA
  | N0
  | N1
  | N2
  | N3
  | N4
  | N5
  | N6
  | N7
  | N8
  | N9
  deriving (Show, Enum, Eq, Ord)

type Coord = (Int, Int)

move :: Coord -> Direction -> Coord
move (x, y) U = (x + 1, y)
move (x, y) D = (x - 1, y)
move (x, y) L = (x, y - 1)
move (x, y) R = (x, y + 1)
move (x, y) A = (x, y)

genpad :: (Enum a) => Coord -> [Coord] -> a -> a -> [[Direction]]
genpad gap cs n1 n2 = filter legal $ nub $ permutations moves
  where
    c1 = cs !! fromEnum n1
    c2 = cs !! fromEnum n2
    deltaud = fst c2 - fst c1
    deltarl = snd c2 - snd c1
    moves =
      replicate
        (abs deltaud)
        (if deltaud > 0
           then U
           else D) ++
      replicate
        (abs deltarl)
        (if deltarl > 0
           then R
           else L)
    legal ms = gap `notElem` scanl move c1 ms

numpad :: Numpad -> Numpad -> [[Direction]]
numpad = genpad gap cs
  where
    gap = (0, 0)
    cs =
      [ (0, 2)
      , (0, 1)
      , (1, 0)
      , (1, 1)
      , (1, 2)
      , (2, 0)
      , (2, 1)
      , (2, 2)
      , (3, 0)
      , (3, 1)
      , (3, 2)
      ]

dirpad d1 d2 = genpad gap cs d1 d2
  where
    gap = (1, 0)
    cs = [(1, 2), (1, 1), (0, 2), (0, 1), (0, 0)]

generateAllSequences ::
     forall a. (Enum a)
  => (a -> a -> [[Direction]])
  -> [a]
  -> [[Direction]]
generateAllSequences padfun pin = go seqPieces
    -- Make sure `a` is the *same* `a` from the forall above
  where
    np :: [a]
    np = (toEnum (0 :: Int)) : pin
    genSeq (c1:c2:rest) = (padfun c1 c2) : ([[A]]) : genSeq (c2 : rest)
    genSeq _ = []
    seqPieces = genSeq np
    go (x:rest) = [x' ++ t | x' <- x, t <- gor]
      where
        gor = go rest
    go _ = [[]]

shortestSequence :: String -> Int
shortestSequence pin = numval * shortestLength
  where
    numval :: Int
    numval = read $ filter (\c -> isDigit c) pin
    toNumpad :: Char -> Numpad
    toNumpad 'A' = NA
    toNumpad c = toEnum $ read [c] + 1
    pin' = map toNumpad pin
    dirseq = generateAllSequences numpad pin'
    f ds = concat $ map (generateAllSequences dirpad) ds
    dirseq'' = iterate f dirseq !! 2
    shortestLength = minimum $ map length dirseq''

permuteMap :: Ord k => M.Map k [a] -> [M.Map k a]
permuteMap m = map (M.fromList . zip ks) (sequence vs)
  where
    ks = M.keys m -- [k]
    vs = M.elems m -- [[a]]

shortestSequence' pin = map tmp'' dirDirMaps'
    -- nd = [((n1,n2), numpad n1 n2) | n1 <- [NA .. N9], n2 <- [NA .. N9]]
  where
    -- pin = [N0, N2, N9, NA]
    -- pin = [N9, N8, N0, NA]
    -- pin = [N1, N7, N9, NA]
    -- pin = [N4, N5, N6, NA]
    numval :: Int
    numval = read $ filter (\c -> isDigit c) pin
    toNumpad :: Char -> Numpad
    toNumpad 'A' = NA
    toNumpad c = toEnum $ read [c] + 1
    pin' = map toNumpad pin
    dirDirMaps =
      permuteMap $
      M.fromList [((d1, d2), dirpad d1 d2) | d1 <- [A .. L], d2 <- [A .. L]]
    dirDirMap = head dirDirMaps

    startDirs = map (\s -> A:s) (generateAllSequences numpad pin')

    convert dd' xs =
      (concat $ map (\x -> M.findWithDefault [] x dd' ++ [A]) $ zip xs (tail xs))

    go init ddm = (iterate (convert ddm) init) !! 1

    tmp' = A:(go (head startDirs) dirDirMap)
    tmp'' dirDirMap  = (sum $ map (\n -> length (M.findWithDefault [] n tmp) ) (zip tmp' (tail tmp'))) - 2
      where
        tmp = M.fromList [((d1, d2), go [d1, d2] dirDirMap) | d1 <- [A .. L], d2 <- [A .. L]]

main :: IO ()
main
  -- print $ generateAllSequences [N0, N2, N9, NA]
  -- runTests
 = do
  let testData = ["029A", "980A", "179A", "456A", "379A"]
  let finalData = ["964A", "140A", "413A", "670A", "593A"]
  print $ map shortestSequence' testData
  print $ sum $ map shortestSequence' finalData
  -- print $ shortestSequence' 2

runTests :: IO ()
runTests =
  runTestTTAndExit $
  TestList
    [ TestCase $
      assertEqual "Only one shortest path from 0 to A" [[R]] (numpad N0 NA)
    , TestCase $
      assertEqual "Two paths from 0 to 3" [[U, R], [R, U]] (numpad N0 N3)
    , TestCase $
      assertEqual "Only one paths from 0 to 1" [[U, L]] (numpad N0 N1)
    , TestCase $
      assertEqual "Only one paths from 1 to 0" [[R, D]] (numpad N1 N0)
    , TestCase $ assertEqual "Three paths from 7 to 0" 3 (length $ numpad N7 N0)
    , TestCase $ assertEqual "Four paths from 9 to 0" 4 (length $ numpad N9 N0)
    , TestCase $ assertEqual "Nine paths from 9 to 0" 9 (length $ numpad N7 NA)
    , TestCase $
      assertEqual
        "Three pin options "
        3
        (length $ generateAllSequences numpad [N0, N2, N9, NA])
    ]
